package parser;

import ast.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal BOOLEAN, CLASS, ELSE, EXTENDS, FALSE, FOR, IF, INSTANCEOF, INT, LENGTH, MAIN,
         NEW, PUBLIC, RETURN, STATIC, STRING, PRINT, THIS, TRUE, VOID, WHILE;

/* operators */
terminal PLUS, MINUS, TIMES, DIV, MOD, LSHIFT, RSHIFT, URSHIFT, LESS_THAN,
         LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, ASSIGN, ASSIGN_PLUS,
         ASSIGN_MINUS, ASSIGN_TIMES, ASSIGN_DIV, ASSIGN_MOD, ASSIGN_AND, ASSIGN_OR,
         ASSIGN_XOR, ASSIGN_LSHIFT, ASSIGN_RSHIFT, ASSIGN_URSHIFT, INCREMENT,
         DECREMENT, NOT, AND, OR, IS_EQUAL, IS_NOT_EQUAL, BITWISE_AND, BITWISE_OR,
         BITWISE_XOR, BITWISE_NOT;

/* delimiters */
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LCURL, RCURL, SEMICOLON, COMMA, DOT,
         QUESTION, COLON;

/* identifiers */
terminal String IDENTIFIER;
terminal String INT_LITERAL;

/* nonterminals */
nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDeclList ClassDeclarationList;
nonterminal ClassDecl ClassDeclaration;
nonterminal VarDeclList VarDeclarationList;
nonterminal VarDecl VarDeclaration;
nonterminal MethodDeclList MethodDeclarationList;
nonterminal MethodDecl MethodDeclaration;
nonterminal FormalList FormalList;
nonterminal Formal Formal;
nonterminal Type Type;
nonterminal DeclarableType DeclarableType;
nonterminal Returnable Returnable;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal StatementSimple StatementSimple;
nonterminal ExpList ExpressionList;
nonterminal Exp Expression;
nonterminal Assignable Assignable;
nonterminal Identifier Identifier;
nonterminal Call Call;

/* precedence declarations: */
precedence right ASSIGN, ASSIGN_PLUS, ASSIGN_MINUS,   // =, +=, -=
                 ASSIGN_TIMES, ASSIGN_DIV,            // *=, /=
                 ASSIGN_MOD, ASSIGN_AND, ASSIGN_OR,   // %=, &=, |=
                 ASSIGN_XOR, ASSIGN_LSHIFT,           // ^=, <<=
                 ASSIGN_RSHIFT, ASSIGN_URSHIFT;       // >>=, >>>=
precedence right QUESTION;                            // ?:
precedence left OR;                                   // ||
precedence left AND;                                  // &&
precedence left BITWISE_OR;                           // |
precedence left BITWISE_XOR;                          // ^
precedence left BITWISE_AND;                          // &
precedence left IS_EQUAL, IS_NOT_EQUAL;               // ==, !=
precedence left LESS_THAN, LESS_THAN_OR_EQUAL,        // <, <=
                GREATER_THAN, GREATER_THAN_OR_EQUAL,  // >, >=
                INSTANCEOF;                           // instanceof
precedence left LSHIFT, RSHIFT, URSHIFT;              // <<, >>, >>>
precedence left PLUS, MINUS;                          // +, -
precedence left TIMES, DIV, MOD;                      // *, /, %
precedence right NOT, BITWISE_NOT;                    // !, ~
precedence left INCREMENT, DECREMENT;                 // ++, --
precedence right NEW;                                 // new
precedence left DOT, LSQUARE;                         // ., [
precedence right ELSE;                                // else

/* productions */
Program ::= MainClass:m ClassDeclarationList:cl
            {: RESULT = new Program(m, cl, mxleft); :}
        | MainClass:m
            {: RESULT = new Program(m, new ClassDeclList(mxright), mxleft); :};

MainClass ::= CLASS:c Identifier:cid LCURL PUBLIC STATIC VOID MAIN LPAREN STRING LSQUARE RSQUARE Identifier:aid RPAREN LCURL StatementList:sl RCURL RCURL
              {: RESULT = new MainClass(cid, aid, sl, cxleft); :}
          | CLASS:c Identifier:cid LCURL PUBLIC STATIC VOID MAIN LPAREN STRING LSQUARE RSQUARE Identifier:aid RPAREN LCURL:lc RCURL RCURL
                          {: RESULT = new MainClass(cid, aid, new StatementList(lcxright), cxleft); :};

ClassDeclarationList ::= ClassDeclaration:c
                         {: ClassDeclList cl = new ClassDeclList(cxleft);
                            cl.add(c);
                            RESULT = cl; :}
                     | ClassDeclarationList:cl ClassDeclaration:c
                         {: cl.add(c);
                            RESULT = cl; :};

ClassDeclaration ::= CLASS:c Identifier:cid LCURL VarDeclarationList:vl MethodDeclarationList:ml RCURL
                     {: RESULT = new ClassDeclSimple(cid, vl, ml, cxleft); :}
                 | CLASS:c Identifier:cid LCURL:lc MethodDeclarationList:ml RCURL
                     {: RESULT = new ClassDeclSimple(cid, new VarDeclList(lcxright), ml, cxleft); :}
                 | CLASS:c Identifier:cid LCURL:lc VarDeclarationList:vl RCURL
                     {: RESULT = new ClassDeclSimple(cid, vl, new MethodDeclList(lcxright), cxleft); :}
                 | CLASS:c Identifier:cid LCURL:lc RCURL
                     {: RESULT = new ClassDeclSimple(cid, new VarDeclList(lcxright), new MethodDeclList(lcxright), cxleft); :}
                 | CLASS:c Identifier:cid EXTENDS Identifier:eid LCURL VarDeclarationList:vl MethodDeclarationList:ml RCURL
                     {: RESULT = new ClassDeclExtends(cid, eid, vl, ml, cxleft); :}
                 | CLASS:c Identifier:cid EXTENDS Identifier:eid LCURL:lc MethodDeclarationList:ml RCURL
                     {: RESULT = new ClassDeclExtends(cid, eid, new VarDeclList(lcxright), ml, cxleft); :}
                 | CLASS:c Identifier:cid EXTENDS Identifier:eid LCURL:lc VarDeclarationList:vl RCURL
                     {: RESULT = new ClassDeclExtends(cid, eid, vl, new MethodDeclList(lcxright), cxleft); :}
                 | CLASS:c Identifier:cid EXTENDS Identifier:eid LCURL:lc RCURL
                     {: RESULT = new ClassDeclExtends(cid, eid, new VarDeclList(lcxright), new MethodDeclList(lcxright), cxleft); :};

VarDeclarationList ::= VarDeclaration:v
                       {: VarDeclList vl = new VarDeclList(vxleft);
                          vl.add(v);
                          RESULT = vl; :}
                   | VarDeclarationList:vl VarDeclaration:v
                       {: vl.add(v);
                          RESULT = vl; :};

VarDeclaration ::= DeclarableType:t Identifier:id SEMICOLON
                   {: RESULT = new VarDecl(t, id, txleft); :};

MethodDeclarationList ::= MethodDeclaration:m
                          {: MethodDeclList ml = new MethodDeclList(mxleft);
                             ml.add(m);
                             RESULT = ml; :}
                      | MethodDeclarationList:ml MethodDeclaration:m
                          {: ml.add(m);
                             RESULT = ml; :};

MethodDeclaration ::= PUBLIC:p Type:t Identifier:mid LPAREN FormalList:fl RPAREN LCURL VarDeclarationList:vl StatementList:sl Returnable:e RCURL
                      {: RESULT = new MethodDecl(t, mid, fl, vl, sl, e, pxleft); :}
                  | PUBLIC:p Type:t Identifier:mid LPAREN:lp RPAREN LCURL VarDeclarationList:vl StatementList:sl Returnable:r RCURL
                      {: RESULT = new MethodDecl(t, mid, new FormalList(lpxright), vl, sl, r, pxleft); :}
                  | PUBLIC:p Type:t Identifier:mid LPAREN FormalList:fl RPAREN LCURL:lc StatementList:sl Returnable:r RCURL
                      {: RESULT = new MethodDecl(t, mid, fl, new VarDeclList(lcxright), sl, r, pxleft); :}
                  | PUBLIC:p Type:t Identifier:mid LPAREN FormalList:fl RPAREN LCURL VarDeclarationList:vl Returnable:r RCURL
                      {: RESULT = new MethodDecl(t, mid, fl, vl, new StatementList(vlxright), r, pxleft); :}
                  | PUBLIC:p Type:t Identifier:mid LPAREN FormalList:fl RPAREN LCURL:lc Returnable:r RCURL
                      {: RESULT = new MethodDecl(t, mid, fl, new VarDeclList(lcxright), new StatementList(lcxright), r, pxleft); :}
                  | PUBLIC:p Type:t Identifier:mid LPAREN:lp RPAREN LCURL VarDeclarationList:vl Returnable:r RCURL
                      {: RESULT = new MethodDecl(t, mid, new FormalList(lpxright), vl, new StatementList(vlxright), r, pxleft); :}
                  | PUBLIC:p Type:t Identifier:mid LPAREN:lp RPAREN LCURL:lc StatementList:sl Returnable:r RCURL
                      {: RESULT = new MethodDecl(t, mid, new FormalList(lpxright), new VarDeclList(lcxright), sl, r, pxleft); :}
                  | PUBLIC:p Type:t Identifier:mid LPAREN:lp RPAREN LCURL:lc Returnable:r RCURL
                      {: RESULT = new MethodDecl(t, mid, new FormalList(lpxright), new VarDeclList(lcxright), new StatementList(lcxright), r, pxleft); :};

Returnable ::= RETURN Expression:e SEMICOLON
                {: RESULT = e; :}
           | RETURN:r SEMICOLON
                {: RESULT = new NoOpExp(rxright); :};

FormalList ::= Formal:f
               {: FormalList fl = new FormalList(fxleft);
                  fl.add(f);
                  RESULT = fl; :}
           | FormalList:fl COMMA Formal:f
               {: fl.add(f);
                  RESULT = fl; :};

Formal ::= DeclarableType:t Identifier:id
           {: RESULT = new Formal(t, id, txleft); :};

Type ::= VOID:v
            {: RESULT = new VoidType(vxleft); :}
         | DeclarableType:t
            {: RESULT = t; :};

DeclarableType ::= INT:i LSQUARE RSQUARE
                {: RESULT = new IntArrayType(ixleft); :}
            | BOOLEAN:b
                {: RESULT = new BooleanType(bxleft); :}
            | INT:i
                {: RESULT = new IntegerType(ixleft); :}
            | Identifier:id
                {: RESULT = new IdentifierType(id.toString(), idxleft); :};

StatementList ::= Statement:s
                  {: StatementList sl = new StatementList(sxleft);
                     sl.add(s);
                     RESULT = sl; :}
              | StatementList:sl Statement:s
                  {: sl.add(s);
                     RESULT = sl; :};

Statement ::= SEMICOLON:x
              {: RESULT = new NoOp(xxleft); :}
          | StatementSimple:s SEMICOLON
              {: RESULT = s; :}
          | LCURL:lc StatementList:sl RCURL
              {: RESULT = new Block(sl, lcxleft); :}
          | LCURL:lc RCURL
              {: RESULT = new Block(new StatementList(lcxright), lcxleft); :}
          | IF:i LPAREN Expression:e RPAREN Statement:s
                        {: RESULT = new If(e, s, ixleft); :}
          | IF:i LPAREN Expression:e RPAREN Statement:s1 ELSE Statement:s2
              {: RESULT = new IfElse(e, s1, s2, ixleft); :}
          | WHILE:w LPAREN Expression:e RPAREN Statement:s
              {: RESULT = new While(e, s, wxleft); :}
          | FOR:f LPAREN StatementSimple:s0 SEMICOLON Expression:e SEMICOLON StatementSimple:s1 RPAREN Statement:s2
              {: RESULT = new For(s0, e, s1, s2, fxleft); :}
          | FOR:f LPAREN:l SEMICOLON Expression:e SEMICOLON StatementSimple:s1 RPAREN Statement:s2
              {: RESULT = new For(new NoOp(lxright), e, s1, s2, fxleft); :}
          | FOR:f LPAREN StatementSimple:s0 SEMICOLON:x SEMICOLON StatementSimple:s1 RPAREN Statement:s2
              {: RESULT = new For(s0, new NoOpExp(xxright), s1, s2, fxleft); :}
          | FOR:f LPAREN StatementSimple:s0 SEMICOLON Expression:e SEMICOLON:x RPAREN Statement:s2
              {: RESULT = new For(s0, e, new NoOp(xxright), s2, fxleft); :}
          | FOR:f LPAREN:l SEMICOLON:x SEMICOLON StatementSimple:s1 RPAREN Statement:s2
              {: RESULT = new For(new NoOp(lxright), new NoOpExp(xxright), s1, s2, fxleft); :}
          | FOR:f LPAREN:l SEMICOLON Expression:e SEMICOLON:x RPAREN Statement:s2
              {: RESULT = new For(new NoOp(lxright), e, new NoOp(xxright), s2, fxleft); :}
          | FOR:f LPAREN StatementSimple:s0 SEMICOLON:x SEMICOLON:y RPAREN Statement:s2
              {: RESULT = new For(s0, new NoOpExp(xxright), new NoOp(yxright), s2, fxleft); :}
          | FOR:f LPAREN:l SEMICOLON:x SEMICOLON:y RPAREN Statement:s2
              {: RESULT = new For(new NoOp(lxright), new NoOpExp(xxright), new NoOp(yxright), s2, fxleft); :};

StatementSimple ::= Call:c
                  {: RESULT = new Action(c, cxleft); :}
              | PRINT:p LPAREN Expression:e RPAREN
                  {: RESULT = new Print(e, pxleft); :}
              | Assignable:a ASSIGN Expression:e
                  {: RESULT = new AssignSimple(a, e, axleft); :}
              | Assignable:a ASSIGN_PLUS Expression:e
                  {: RESULT = new AssignPlus(a, e, axleft); :}
              | Assignable:a ASSIGN_MINUS Expression:e
                  {: RESULT = new AssignMinus(a, e, axleft); :}
              | Assignable:a ASSIGN_TIMES Expression:e
                  {: RESULT = new AssignTimes(a, e, axleft); :}
              | Assignable:a ASSIGN_DIV Expression:e
                  {: RESULT = new AssignDivide(a, e, axleft); :}
              | Assignable:a ASSIGN_MOD Expression:e
                  {: RESULT = new AssignMod(a, e, axleft); :}
              | Assignable:a ASSIGN_AND Expression:e
                  {: RESULT = new AssignAnd(a, e, axleft); :}
              | Assignable:a ASSIGN_OR Expression:e
                  {: RESULT = new AssignOr(a, e, axleft); :}
              | Assignable:a ASSIGN_XOR Expression:e
                  {: RESULT = new AssignXor(a, e, axleft); :}
              | Assignable:a ASSIGN_LSHIFT Expression:e
                  {: RESULT = new AssignLeftShift(a, e, axleft); :}
              | Assignable:a ASSIGN_RSHIFT Expression:e
                  {: RESULT = new AssignRightShift(a, e, axleft); :}
              | Assignable:a ASSIGN_URSHIFT Expression:e
                  {: RESULT = new AssignUnsignedRightShift(a, e, axleft); :}
              | Assignable:a INCREMENT
                  {: RESULT = new PostIncrement(a, axleft); :}
              | Assignable:a DECREMENT
                  {: RESULT = new PostDecrement(a, axleft); :}
              | INCREMENT:i Assignable:a
                  {: RESULT = new PreIncrement(a, ixleft); :}
              | DECREMENT:d Assignable:a
                  {: RESULT = new PreDecrement(a, dxleft); :};

Assignable ::= Expression:e1 LSQUARE Expression:e2 RSQUARE
               {: RESULT = new ArrayLookup(e1, e2, e1xleft); :}
           | Expression:e DOT Identifier:id
               {: RESULT = new Field(e, id, exleft); :}
           | Identifier:id
               {: RESULT = new IdentifierExp(id.toString(), idxleft); :};

ExpressionList ::= Expression:e
                   {: ExpList el = new ExpList(exleft);
                      el.add(e);
                      RESULT = el; :}
               | ExpressionList:el COMMA Expression:e
                   {: el.add(e);
                      RESULT = el; :};

Expression ::= Call:c
                          {: RESULT = c; :}
           | Expression:e1 AND Expression:e2
                          {: RESULT = new And(e1, e2, e1xleft); :}
           | Expression:e1 OR Expression:e2
                          {: RESULT = new Or(e1, e2, e1xleft); :}
           | Expression:e1 IS_EQUAL Expression:e2
                          {: RESULT = new Equal(e1, e2, e1xleft); :}
           | Expression:e1 IS_NOT_EQUAL Expression:e2
                          {: RESULT = new NotEqual(e1, e2, e1xleft); :}
           | Expression:e1 LESS_THAN Expression:e2
                          {: RESULT = new LessThan(e1, e2, e1xleft); :}
           | Expression:e1 LESS_THAN_OR_EQUAL Expression:e2
                          {: RESULT = new LessThanOrEqual(e1, e2, e1xleft); :}
           | Expression:e1 GREATER_THAN Expression:e2
                          {: RESULT = new GreaterThan(e1, e2, e1xleft); :}
           | Expression:e1 GREATER_THAN_OR_EQUAL Expression:e2
                          {: RESULT = new GreaterThanOrEqual(e1, e2, e1xleft); :}
           | Expression:e1 BITWISE_AND Expression:e2
                          {: RESULT = new BitwiseAnd(e1, e2, e1xleft); :}
           | Expression:e1 BITWISE_OR Expression:e2
                          {: RESULT = new BitwiseOr(e1, e2, e1xleft); :}
           | Expression:e1 BITWISE_XOR Expression:e2
                          {: RESULT = new BitwiseXor(e1, e2, e1xleft); :}
           | Expression:e1 PLUS Expression:e2
                          {: RESULT = new Plus(e1, e2, e1xleft); :}
           | Expression:e1 MINUS Expression:e2
                          {: RESULT = new Minus(e1, e2, e1xleft); :}
           | Expression:e1 TIMES Expression:e2
                          {: RESULT = new Times(e1, e2, e1xleft); :}
           | Expression:e1 DIV Expression:e2
                          {: RESULT = new Divide(e1, e2, e1xleft); :}
           | Expression:e1 MOD Expression:e2
                          {: RESULT = new Mod(e1, e2, e1xleft); :}
           | Expression:e1 LSHIFT Expression:e2
                          {: RESULT = new LeftShift(e1, e2, e1xleft); :}
           | Expression:e1 RSHIFT Expression:e2
                          {: RESULT = new RightShift(e1, e2, e1xleft); :}
           | Expression:e1 URSHIFT Expression:e2
                          {: RESULT = new UnsignedRightShift(e1, e2, e1xleft); :}
           | Expression:e1 LSQUARE Expression:e2 RSQUARE
                          {: RESULT = new ArrayLookup(e1, e2, e1xleft); :}
           | Expression:e DOT LENGTH
                          {: RESULT = new ArrayLength(e, exleft); :}
           | Expression:e DOT Identifier:id
                          {: RESULT = new Field(e, id, exleft); :}
           | Expression:c QUESTION Expression:e1 COLON Expression:e2
                          {: RESULT = new Ternary(c, e1, e2, cxleft); :}
           | Expression:e INSTANCEOF Identifier:id
                          {: RESULT = new InstanceOf(e, id, exleft); :}
           | INT_LITERAL:n
                          {: RESULT = new IntegerLiteral(Integer.parseInt(n), nxleft); :}
           | TRUE:t
                          {: RESULT = new True(txleft); :}
           | FALSE:f
                          {: RESULT = new False(fxleft); :}
           | Identifier:id
                          {: RESULT = new IdentifierExp(id.toString(), idxleft); :}
           | THIS:t
                          {: RESULT = new This(txleft); :}
           | NEW:n INT LSQUARE Expression:e RSQUARE
                          {: RESULT = new NewArray(e, nxleft); :}
           | NEW:n Identifier:id LPAREN RPAREN
                          {: RESULT = new NewObject(id, nxleft); :}
           | NOT:n Expression:e
                          {: RESULT = new Not(e, nxleft); :}
           | BITWISE_NOT:n Expression:e
                          {: RESULT = new BitwiseNot(e, nxleft); :}
           | LPAREN Expression:e RPAREN
                          {: RESULT = e; :};

Call ::= Expression:e DOT Identifier:id LPAREN:lp RPAREN
           {: RESULT = new Call(e, id, new ExpList(lpxright), exleft); :}
    | Expression:e DOT Identifier:id LPAREN ExpressionList:el RPAREN
           {: RESULT = new Call(e, id, el, exleft); :}
    | Identifier:id LPAREN:lp RPAREN
           {: RESULT = new Call(new This(idxleft), id, new ExpList(lpxright), idxleft); :}
    | Identifier:id LPAREN ExpressionList:el RPAREN
           {: RESULT = new Call(new This(idxleft), id, el, idxleft); :};

Identifier ::= IDENTIFIER:id
               {: RESULT = new Identifier(id, idxleft); :};
