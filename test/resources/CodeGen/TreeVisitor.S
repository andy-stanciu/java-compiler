    .data
TV$$:
    .quad   0
    .quad   TV$Start
Tree$$:
    .quad   0
    .quad   Tree$Compare
    .quad   Tree$Delete
    .quad   Tree$GetHas_Left
    .quad   Tree$GetHas_Right
    .quad   Tree$GetKey
    .quad   Tree$GetLeft
    .quad   Tree$GetRight
    .quad   Tree$Init
    .quad   Tree$Insert
    .quad   Tree$Print
    .quad   Tree$RecPrint
    .quad   Tree$Remove
    .quad   Tree$RemoveLeft
    .quad   Tree$RemoveRight
    .quad   Tree$Search
    .quad   Tree$SetHas_Left
    .quad   Tree$SetHas_Right
    .quad   Tree$SetKey
    .quad   Tree$SetLeft
    .quad   Tree$SetRight
    .quad   Tree$accept
Visitor$$:
    .quad   0
    .quad   Visitor$visit
MyVisitor$$:
    .quad   Visitor$$
    .quad   MyVisitor$visit

    .text
    .globl  asm_main
asm_main:
    pushq   %rbp
    movq    %rsp,%rbp
    movq    $8,%rdi
    call    mjcalloc
    leaq    TV$$(%rip),%rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    movq    %rax,%rdi
    call    put
    movq    %rbp,%rsp
    popq    %rbp
    ret
TV$Start:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    $56,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Tree$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $16,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *80(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $100000000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $8,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *72(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $24,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *72(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $4,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *72(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $12,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *72(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $20,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *72(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $28,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *72(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $14,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *72(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *80(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $100000000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $24,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    MyVisitor$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $50000000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *168(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $100000000,%rax
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $24,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *120(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $12,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *120(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $16,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *120(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $50,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *120(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $12,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *120(%rax)
    movq    %rax,%rdi
    call    put
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $12,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *16(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *80(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $12,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *120(%rax)
    movq    %rax,%rdi
    call    put
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$Init:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$SetRight:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    48(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$SetLeft:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    32(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$GetRight:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    48(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$GetLeft:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    32(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$GetKey:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$SetKey:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$GetHas_Right:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$GetHas_Left:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$SetHas_Left:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$SetHas_Right:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$Compare:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true0
    movq    $0,%rax
    jmp     else0
true0:
    movq    $1,%rax
join0:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if0
else0:
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true1
    movq    $0,%rax
    jmp     join1
true1:
    movq    $1,%rax
join1:
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else1
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if1
else1:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if1:
end_if0:
    movq    -32(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$Insert:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $64,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $56,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Tree$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test0
while0:
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -56(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true2
    movq    $0,%rax
    jmp     else2
true2:
    movq    $1,%rax
join2:
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    je      else3
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if3
else3:
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *128(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *152(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
end_if3:
    jmp     end_if2
else2:
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    je      else4
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if4
else4:
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *136(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *160(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
end_if4:
end_if2:
while_test0:
    movq    -48(%rbp),%rax
    cmpq    $0,%rax
    jne     while0
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$Delete:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $80,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -64(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test1
while1:
    leaq    -72(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -72(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true3
    movq    $0,%rax
    jmp     else5
true3:
    movq    $1,%rax
join3:
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    je      else6
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if6
else6:
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if6:
    jmp     end_if5
else5:
    movq    -72(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true4
    movq    $0,%rax
    jmp     else7
true4:
    movq    $1,%rax
join4:
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    je      else8
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if8
else8:
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if8:
    jmp     end_if7
else7:
    movq    -64(%rbp),%rax
    cmpq    $0,%rax
    je      else9
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else10
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else10
join5:
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if10
else10:
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *96(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
end_if10:
    jmp     end_if9
else9:
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *96(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
end_if9:
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if7:
end_if5:
    leaq    -64(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
while_test1:
    movq    -40(%rbp),%rax
    cmpq    $0,%rax
    jne     while1
    movq    -48(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$Remove:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    je      else11
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *104(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if11
else11:
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    je      else12
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *112(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if12
else12:
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    cmpq    $0,%rax
    je      else13
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    40(%rdx),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *152(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *128(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if13
else13:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    40(%rdx),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *160(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *136(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
end_if13:
end_if12:
end_if11:
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$RemoveRight:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    jmp     while_test2
while2:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *56(%rax)
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *40(%rax)
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *144(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
while_test2:
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    jne     while2
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    40(%rdx),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *160(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *136(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$RemoveLeft:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    jmp     while_test3
while3:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *48(%rax)
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *40(%rax)
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *144(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
while_test3:
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    jne     while3
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    40(%rdx),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *152(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *128(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$Search:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test4
while4:
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true5
    movq    $0,%rax
    jmp     else14
true5:
    movq    $1,%rax
join6:
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    je      else15
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if15
else15:
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if15:
    jmp     end_if14
else14:
    movq    -48(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true6
    movq    $0,%rax
    jmp     else16
true6:
    movq    $1,%rax
join7:
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    je      else17
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if17
else17:
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if17:
    jmp     end_if16
else16:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if16:
end_if14:
while_test4:
    movq    -40(%rbp),%rax
    cmpq    $0,%rax
    jne     while4
    movq    -32(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$Print:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *88(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$RecPrint:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    je      else18
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *48(%rax)
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *88(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if18
else18:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if18:
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *40(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    je      else19
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *56(%rax)
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *88(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if19
else19:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if19:
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Tree$accept:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    $333,%rax
    movq    %rax,%rdi
    call    put
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *8(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Visitor$visit:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    je      else20
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *168(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if20
else20:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if20:
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    je      else21
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *168(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if21
else21:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if21:
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
MyVisitor$visit:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    cmpq    $0,%rax
    je      else22
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *168(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if22
else22:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if22:
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *40(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    cmpq    $0,%rax
    je      else23
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *168(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if23
else23:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if23:
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
