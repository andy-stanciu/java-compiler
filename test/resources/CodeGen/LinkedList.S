    .data
Element$$:
    .quad   0
    .quad   Element$Compare
    .quad   Element$Equal
    .quad   Element$GetAge
    .quad   Element$GetMarried
    .quad   Element$GetSalary
    .quad   Element$Init
List$$:
    .quad   0
    .quad   List$Delete
    .quad   List$GetElem
    .quad   List$GetEnd
    .quad   List$GetNext
    .quad   List$Init
    .quad   List$InitNew
    .quad   List$Insert
    .quad   List$Print
    .quad   List$Search
    .quad   List$SetNext
LL$$:
    .quad   0
    .quad   LL$Start

    .text
    .globl  asm_main
asm_main:
    pushq   %rbp
    movq    %rsp,%rbp
    movq    $8,%rdi
    call    mjcalloc
    leaq    LL$$(%rip),%rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    movq    %rax,%rdi
    call    put
    movq    %rbp,%rsp
    popq    %rbp
    ret
Element$Init:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    movq    %rcx,-32(%rbp)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Element$GetAge:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Element$GetSalary:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Element$GetMarried:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Element$Equal:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *24(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else0
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if0
else0:
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    pushq   %rax
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else1
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if1
else1:
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else3
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if3
else3:
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if3:
    jmp     end_if2
else2:
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    jmp     else4
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if4
else4:
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if4:
end_if2:
end_if1:
end_if0:
    movq    -24(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Element$Compare:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true0
    movq    $0,%rax
    jmp     else5
true0:
    movq    $1,%rax
join0:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if5
else5:
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true1
    movq    $0,%rax
    jmp     join1
true1:
    movq    $1,%rax
join1:
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else6
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if6
else6:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if6:
end_if5:
    movq    -32(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$Init:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$InitNew:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    movq    %rcx,-32(%rbp)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$Insert:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    List$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -40(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$SetNext:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$Delete:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $96,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -80(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,%rcx
    subq    %rcx,%rdx
    movq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -64(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -72(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test0
while0:
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -72(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *16(%rax)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -80(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true2
    movq    $0,%rax
    jmp     else8
true2:
    movq    $1,%rax
join2:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *32(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if8
else8:
    movq    $0,%rax
    pushq   %rax
    movq    $555,%rax
    popq    %rdx
    movq    %rax,%rcx
    subq    %rcx,%rdx
    movq    %rdx,%rax
    movq    %rax,%rdi
    call    put
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -56(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *80(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $0,%rax
    pushq   %rax
    movq    $555,%rax
    popq    %rdx
    movq    %rax,%rcx
    subq    %rcx,%rdx
    movq    %rdx,%rax
    movq    %rax,%rdi
    call    put
end_if8:
    jmp     end_if7
else7:
    leaq    -88(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if7:
    movq    -32(%rbp),%rax
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else9
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *32(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -64(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *24(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -72(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *16(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -80(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if9
else9:
    leaq    -88(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if9:
while_test0:
    movq    -64(%rbp),%rax
    xorq    $1,%rax
    cmpq    $0,%rax
    je      join3
    movq    -32(%rbp),%rax
    xorq    $1,%rax
    cmpq    $0,%rax
    jne     while0
join3:
    movq    -24(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$Search:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $64,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test1
while1:
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *16(%rax)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if10
else10:
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if10:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *32(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *24(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *16(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
while_test1:
    movq    -48(%rbp),%rax
    xorq    $1,%rax
    cmpq    $0,%rax
    jne     while1
    movq    -24(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$GetEnd:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$GetElem:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$GetNext:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
List$Print:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test2
while2:
    movq    -32(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    movq    %rax,%rdi
    call    put
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *32(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *24(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *16(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
while_test2:
    movq    -24(%rbp),%rax
    xorq    $1,%rax
    cmpq    $0,%rax
    jne     while2
    movq    $1,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
LL$Start:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $64,%rsp
    movq    %rdi,-8(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    List$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Element$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    $25,%rax
    pushq   %rax
    movq    $37000,%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $10000000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Element$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    $39,%rax
    pushq   %rax
    movq    $42000,%rax
    pushq   %rax
    movq    $1,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $10000000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Element$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    $22,%rax
    pushq   %rax
    movq    $34000,%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Element$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -56(%rbp),%rax
    pushq   %rax
    movq    $27,%rax
    pushq   %rax
    movq    $34000,%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *72(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -56(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *72(%rax)
    movq    %rax,%rdi
    call    put
    movq    $10000000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Element$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    $28,%rax
    pushq   %rax
    movq    $35000,%rax
    pushq   %rax
    movq    $0,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *48(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *56(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $2220000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *8(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $33300000,%rax
    movq    %rax,%rdi
    call    put
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -40(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *8(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *64(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $44440000,%rax
    movq    %rax,%rdi
    call    put
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
