    .data
A$$:
    .quad   0
    .quad   A$init
    .quad   A$setA
    .quad   A$setIA
B$$:
    .quad   A$$
    .quad   A$init
    .quad   B$setA
    .quad   A$setIA

    .text
    .globl  asm_main
asm_main:
    pushq   %rbp
    movq    %rsp,%rbp
    movq    $32,%rdi
    call    mjcalloc
    leaq    A$$(%rip),%rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    movq    $100,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *16(%rax)
    movq    %rax,%rdi
    call    put
    movq    $32,%rdi
    call    mjcalloc
    leaq    B$$(%rip),%rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    movq    $100,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *16(%rax)
    movq    %rax,%rdi
    call    put
    movq    $32,%rdi
    call    mjcalloc
    leaq    B$$(%rip),%rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    movq    $1,%rax
    pushq   %rax
    movq    $1,%rax
    pushq   %rax
    movq    $2,%rax
    pushq   %rax
    addq    $1,%rax
    shlq    $3,%rax
    movq    %rax,%rdi
    call    mjcalloc
    popq    %rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    movq    %rax,%rdi
    call    put
    movq    %rbp,%rsp
    popq    %rbp
    ret
A$init:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    movq    %rcx,-32(%rbp)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,%rdi
    movq    0(%rdx),%rsi
    cmpq    $0,%rdi
    jl      exception_array
    cmpq    %rsi,%rdi
    jge     exception_array
    addq    $1,%rdi
    movq    (%rdx,%rdi,8),%rax
    pushq   %rax
    movq    $17,%rax
    popq    %rdx
    addq    %rdx,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
A$setA:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    $2,%rax
    popq    %rdx
    imulq   %rdx,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
A$setIA:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -16(%rbp),%rax
    pushq   0(%rax)
    movq    $0,%rax
    popq    %rdx
    movq    %rax,%rdi
    movq    0(%rdx),%rsi
    cmpq    $0,%rdi
    jl      exception_array
    cmpq    %rsi,%rdi
    jge     exception_array
    addq    $1,%rdi
    pushq   %rdx
    pushq   %rdi
    movq    $2002,%rax
    popq    %rdi
    popq    %rdx
    movq    %rax,(%rdx,%rdi,8)
    leaq    -16(%rbp),%rax
    pushq   0(%rax)
    movq    -16(%rbp),%rax
    movq    0(%rax),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,%rcx
    subq    %rcx,%rdx
    movq    %rdx,%rax
    popq    %rdx
    movq    %rax,%rdi
    movq    0(%rdx),%rsi
    cmpq    $0,%rdi
    jl      exception_array
    cmpq    %rsi,%rdi
    jge     exception_array
    addq    $1,%rdi
    pushq   %rdx
    pushq   %rdi
    movq    $1,%rax
    popq    %rdi
    popq    %rdx
    movq    %rax,(%rdx,%rdi,8)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,%rdi
    movq    0(%rdx),%rsi
    cmpq    $0,%rdi
    jl      exception_array
    cmpq    %rsi,%rdi
    jge     exception_array
    addq    $1,%rdi
    movq    (%rdx,%rdi,8),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
B$setA:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $2,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    $3,%rax
    popq    %rdx
    imulq   %rdx,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
