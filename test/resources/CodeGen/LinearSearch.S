    .data
LS$$:
    .quad   0
    .quad   LS$Init
    .quad   LS$Print
    .quad   LS$Search
    .quad   LS$Start

    .text
    .globl  asm_main
asm_main:
    pushq   %rbp
    movq    %rsp,%rbp
    movq    $24,%rdi
    call    mjcalloc
    leaq    LS$$(%rip),%rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    movq    $10,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    movq    %rax,%rdi
    call    put
    movq    %rbp,%rsp
    popq    %rbp
    ret
LS$Start:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *8(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *16(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    $9999,%rax
    movq    %rax,%rdi
    call    put
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    $8,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    movq    %rax,%rdi
    call    put
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    $12,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    movq    %rax,%rdi
    call    put
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    $17,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    movq    %rax,%rdi
    call    put
    movq    -8(%rbp),%rax
    pushq   %rax
    movq    $50,%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    movq    %rax,%rdi
    call    put
    movq    $55,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
LS$Print:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test0
while0:
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,%rdi
    movq    0(%rdx),%rsi
    cmpq    $0,%rdi
    jl      exception_array
    cmpq    %rsi,%rdi
    jge     exception_array
    addq    $1,%rdi
    movq    (%rdx,%rdi,8),%rax
    movq    %rax,%rdi
    call    put
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
while_test0:
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true0
    movq    $0,%rax
    jmp     join0
true0:
    movq    $1,%rax
    jmp     while0
join0:
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
LS$Search:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $64,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test1
while1:
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,%rdi
    movq    0(%rdx),%rsi
    cmpq    $0,%rdi
    jl      exception_array
    cmpq    %rsi,%rdi
    jge     exception_array
    addq    $1,%rdi
    movq    (%rdx,%rdi,8),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -56(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -48(%rbp),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true1
    movq    $0,%rax
    jmp     else0
true1:
    movq    $1,%rax
join1:
    leaq    -64(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if0
else0:
    movq    -48(%rbp),%rax
    pushq   %rax
    movq    -56(%rbp),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true2
    movq    $0,%rax
    jmp     join2
true2:
    movq    $1,%rax
join2:
    xorq    $1,%rax
    cmpq    $0,%rax
    je      else1
    leaq    -64(%rbp),%rax
    pushq   %rax
    movq    $0,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     end_if1
else1:
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
end_if1:
end_if0:
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
while_test1:
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true3
    movq    $0,%rax
    jmp     join3
true3:
    movq    $1,%rax
    jmp     while1
join3:
    movq    -40(%rbp),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
LS$Init:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $48,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    addq    $1,%rax
    shlq    $3,%rax
    movq    %rax,%rdi
    call    mjcalloc
    popq    %rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    jmp     while_test2
while2:
    leaq    -40(%rbp),%rax
    pushq   %rax
    movq    $2,%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    imulq   %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -48(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    $3,%rax
    popq    %rdx
    movq    %rax,%rcx
    subq    %rcx,%rdx
    movq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   0(%rax)
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,%rdi
    movq    0(%rdx),%rsi
    cmpq    $0,%rdi
    jl      exception_array
    cmpq    %rsi,%rdi
    jge     exception_array
    addq    $1,%rdi
    pushq   %rdx
    pushq   %rdi
    movq    -40(%rbp),%rax
    pushq   %rax
    movq    -48(%rbp),%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdi
    popq    %rdx
    movq    %rax,(%rdx,%rdi,8)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    addq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    popq    %rdx
    movq    %rax,%rcx
    subq    %rcx,%rdx
    movq    %rdx,%rax
    popq    %rdx
    movq    %rax,0(%rdx)
while_test2:
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    cmpq    %rax,%rdx
    jl      true4
    movq    $0,%rax
    jmp     join4
true4:
    movq    $1,%rax
    jmp     while2
join4:
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
