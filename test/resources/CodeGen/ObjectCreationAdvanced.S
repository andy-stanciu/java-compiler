    .data
Vector3D$$:
    .quad   0
    .quad   Vector3D$copy
    .quad   Vector3D$create
    .quad   Vector3D$getX
    .quad   Vector3D$getY
    .quad   Vector3D$getZ
VectorDriver$$:
    .quad   0
    .quad   VectorDriver$run

    .text
    .globl  asm_main
asm_main:
    pushq   %rbp
    movq    %rsp,%rbp
    movq    $8,%rdi
    call    mjcalloc
    leaq    VectorDriver$$(%rip),%rdx
    movq    %rdx,0(%rax)
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    movq    %rax,%rdi
    call    put
    movq    %rbp,%rsp
    popq    %rbp
    ret
Vector3D$create:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    %rdx,-24(%rbp)
    movq    %rcx,-32(%rbp)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -24(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    addq    %rdx,%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    popq    %rdx
    addq    %rdx,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Vector3D$copy:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    %rsi,-16(%rbp)
    movq    -8(%rbp),%rdx
    leaq    8(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *24(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    16(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *32(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    leaq    24(%rdx),%rax
    pushq   %rax
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    pushq   %rcx
    call    *40(%rax)
    popq    %rcx
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    popq    %rdx
    addq    %rdx,%rax
    pushq   %rax
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    popq    %rdx
    addq    %rdx,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Vector3D$getX:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    8(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Vector3D$getY:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    16(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
Vector3D$getZ:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $16,%rsp
    movq    %rdi,-8(%rbp)
    movq    -8(%rbp),%rdx
    movq    24(%rdx),%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
VectorDriver$run:
    pushq   %rbp
    movq    %rsp,%rbp
    subq    $32,%rsp
    movq    %rdi,-8(%rbp)
    leaq    -16(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Vector3D$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -24(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Vector3D$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    leaq    -32(%rbp),%rax
    pushq   %rax
    movq    $32,%rdi
    pushq   %rcx
    call    mjcalloc
    popq    %rcx
    leaq    Vector3D$$(%rip),%rdx
    movq    %rdx,0(%rax)
    popq    %rdx
    movq    %rax,0(%rdx)
    movq    -16(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *24(%rax)
    movq    %rax,%rdi
    call    put
    movq    -24(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *32(%rax)
    movq    %rax,%rdi
    call    put
    movq    -32(%rbp),%rax
    pushq   %rax
    popq    %rdi
    movq    0(%rdi),%rax
    call    *40(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    $1,%rax
    pushq   %rax
    movq    $2,%rax
    pushq   %rax
    movq    $3,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *16(%rax)
    movq    %rax,%rdi
    call    put
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    $4,%rax
    pushq   %rax
    movq    $5,%rax
    pushq   %rax
    movq    $6,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *16(%rax)
    movq    %rax,%rdi
    call    put
    movq    -32(%rbp),%rax
    pushq   %rax
    movq    $7,%rax
    pushq   %rax
    movq    $8,%rax
    pushq   %rax
    movq    $9,%rax
    pushq   %rax
    popq    %rcx
    popq    %rdx
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *16(%rax)
    movq    %rax,%rdi
    call    put
    movq    -16(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    movq    %rax,%rdi
    call    put
    movq    -24(%rbp),%rax
    pushq   %rax
    movq    -32(%rbp),%rax
    pushq   %rax
    popq    %rsi
    popq    %rdi
    movq    0(%rdi),%rax
    call    *8(%rax)
    movq    %rax,%rdi
    call    put
    movq    $0,%rax
    movq    %rbp,%rsp
    popq    %rbp
    ret
