Scanning TreeVisitor.java...
CLASS ID(TreeVisitor) LCURL PUBLIC STATIC VOID MAIN LPAREN STRING LSQUARE RSQUARE ID(a) RPAREN LCURL PRINT LPAREN NEW ID(TV) LPAREN RPAREN DOT ID(Start) LPAREN RPAREN RPAREN SEMICOLON RCURL RCURL CLASS ID(TV) LCURL PUBLIC INT ID(Start) LPAREN RPAREN LCURL ID(Tree) ID(root) SEMICOLON BOOLEAN ID(ntb) SEMICOLON INT ID(nti) SEMICOLON ID(MyVisitor) ID(v) SEMICOLON ID(root) EQUALS NEW ID(Tree) LPAREN RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Init) LPAREN INT(16) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Print) LPAREN RPAREN SEMICOLON PRINT LPAREN INT(100000000) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Insert) LPAREN INT(8) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Insert) LPAREN INT(24) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Insert) LPAREN INT(4) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Insert) LPAREN INT(12) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Insert) LPAREN INT(20) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Insert) LPAREN INT(28) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Insert) LPAREN INT(14) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Print) LPAREN RPAREN SEMICOLON PRINT LPAREN INT(100000000) RPAREN SEMICOLON ID(v) EQUALS NEW ID(MyVisitor) LPAREN RPAREN SEMICOLON PRINT LPAREN INT(50000000) RPAREN SEMICOLON ID(nti) EQUALS ID(root) DOT ID(accept) LPAREN ID(v) RPAREN SEMICOLON PRINT LPAREN INT(100000000) RPAREN SEMICOLON PRINT LPAREN ID(root) DOT ID(Search) LPAREN INT(24) RPAREN RPAREN SEMICOLON PRINT LPAREN ID(root) DOT ID(Search) LPAREN INT(12) RPAREN RPAREN SEMICOLON PRINT LPAREN ID(root) DOT ID(Search) LPAREN INT(16) RPAREN RPAREN SEMICOLON PRINT LPAREN ID(root) DOT ID(Search) LPAREN INT(50) RPAREN RPAREN SEMICOLON PRINT LPAREN ID(root) DOT ID(Search) LPAREN INT(12) RPAREN RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Delete) LPAREN INT(12) RPAREN SEMICOLON ID(ntb) EQUALS ID(root) DOT ID(Print) LPAREN RPAREN SEMICOLON PRINT LPAREN ID(root) DOT ID(Search) LPAREN INT(12) RPAREN RPAREN SEMICOLON RETURN INT(0) SEMICOLON RCURL RCURL CLASS ID(Tree) LCURL ID(Tree) ID(left) SEMICOLON ID(Tree) ID(right) SEMICOLON INT ID(key) SEMICOLON BOOLEAN ID(has_left) SEMICOLON BOOLEAN ID(has_right) SEMICOLON ID(Tree) ID(my_null) SEMICOLON PUBLIC BOOLEAN ID(Init) LPAREN INT ID(v_key) RPAREN LCURL ID(key) EQUALS ID(v_key) SEMICOLON ID(has_left) EQUALS FALSE SEMICOLON ID(has_right) EQUALS FALSE SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(SetRight) LPAREN ID(Tree) ID(rn) RPAREN LCURL ID(right) EQUALS ID(rn) SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(SetLeft) LPAREN ID(Tree) ID(ln) RPAREN LCURL ID(left) EQUALS ID(ln) SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC ID(Tree) ID(GetRight) LPAREN RPAREN LCURL RETURN ID(right) SEMICOLON RCURL PUBLIC ID(Tree) ID(GetLeft) LPAREN RPAREN LCURL RETURN ID(left) SEMICOLON RCURL PUBLIC INT ID(GetKey) LPAREN RPAREN LCURL RETURN ID(key) SEMICOLON RCURL PUBLIC BOOLEAN ID(SetKey) LPAREN INT ID(v_key) RPAREN LCURL ID(key) EQUALS ID(v_key) SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(GetHas_Right) LPAREN RPAREN LCURL RETURN ID(has_right) SEMICOLON RCURL PUBLIC BOOLEAN ID(GetHas_Left) LPAREN RPAREN LCURL RETURN ID(has_left) SEMICOLON RCURL PUBLIC BOOLEAN ID(SetHas_Left) LPAREN BOOLEAN ID(val) RPAREN LCURL ID(has_left) EQUALS ID(val) SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(SetHas_Right) LPAREN BOOLEAN ID(val) RPAREN LCURL ID(has_right) EQUALS ID(val) SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(Compare) LPAREN INT ID(num1) COMMA INT ID(num2) RPAREN LCURL BOOLEAN ID(ntb) SEMICOLON INT ID(nti) SEMICOLON ID(ntb) EQUALS FALSE SEMICOLON ID(nti) EQUALS ID(num2) PLUS INT(1) SEMICOLON IF LPAREN ID(num1) LESS_THAN ID(num2) RPAREN ID(ntb) EQUALS FALSE SEMICOLON ELSE IF LPAREN NOT LPAREN ID(num1) LESS_THAN ID(nti) RPAREN RPAREN ID(ntb) EQUALS FALSE SEMICOLON ELSE ID(ntb) EQUALS TRUE SEMICOLON RETURN ID(ntb) SEMICOLON RCURL PUBLIC BOOLEAN ID(Insert) LPAREN INT ID(v_key) RPAREN LCURL ID(Tree) ID(new_node) SEMICOLON BOOLEAN ID(ntb) SEMICOLON ID(Tree) ID(current_node) SEMICOLON BOOLEAN ID(cont) SEMICOLON INT ID(key_aux) SEMICOLON ID(new_node) EQUALS NEW ID(Tree) LPAREN RPAREN SEMICOLON ID(ntb) EQUALS ID(new_node) DOT ID(Init) LPAREN ID(v_key) RPAREN SEMICOLON ID(current_node) EQUALS THIS SEMICOLON ID(cont) EQUALS TRUE SEMICOLON WHILE LPAREN ID(cont) RPAREN LCURL ID(key_aux) EQUALS ID(current_node) DOT ID(GetKey) LPAREN RPAREN SEMICOLON IF LPAREN ID(v_key) LESS_THAN ID(key_aux) RPAREN LCURL IF LPAREN ID(current_node) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN ID(current_node) EQUALS ID(current_node) DOT ID(GetLeft) LPAREN RPAREN SEMICOLON ELSE LCURL ID(cont) EQUALS FALSE SEMICOLON ID(ntb) EQUALS ID(current_node) DOT ID(SetHas_Left) LPAREN TRUE RPAREN SEMICOLON ID(ntb) EQUALS ID(current_node) DOT ID(SetLeft) LPAREN ID(new_node) RPAREN SEMICOLON RCURL RCURL ELSE LCURL IF LPAREN ID(current_node) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN ID(current_node) EQUALS ID(current_node) DOT ID(GetRight) LPAREN RPAREN SEMICOLON ELSE LCURL ID(cont) EQUALS FALSE SEMICOLON ID(ntb) EQUALS ID(current_node) DOT ID(SetHas_Right) LPAREN TRUE RPAREN SEMICOLON ID(ntb) EQUALS ID(current_node) DOT ID(SetRight) LPAREN ID(new_node) RPAREN SEMICOLON RCURL RCURL RCURL RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(Delete) LPAREN INT ID(v_key) RPAREN LCURL ID(Tree) ID(current_node) SEMICOLON ID(Tree) ID(parent_node) SEMICOLON BOOLEAN ID(cont) SEMICOLON BOOLEAN ID(found) SEMICOLON BOOLEAN ID(ntb) SEMICOLON BOOLEAN ID(is_root) SEMICOLON INT ID(key_aux) SEMICOLON ID(current_node) EQUALS THIS SEMICOLON ID(parent_node) EQUALS THIS SEMICOLON ID(cont) EQUALS TRUE SEMICOLON ID(found) EQUALS FALSE SEMICOLON ID(is_root) EQUALS TRUE SEMICOLON WHILE LPAREN ID(cont) RPAREN LCURL ID(key_aux) EQUALS ID(current_node) DOT ID(GetKey) LPAREN RPAREN SEMICOLON IF LPAREN ID(v_key) LESS_THAN ID(key_aux) RPAREN IF LPAREN ID(current_node) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN LCURL ID(parent_node) EQUALS ID(current_node) SEMICOLON ID(current_node) EQUALS ID(current_node) DOT ID(GetLeft) LPAREN RPAREN SEMICOLON RCURL ELSE ID(cont) EQUALS FALSE SEMICOLON ELSE IF LPAREN ID(key_aux) LESS_THAN ID(v_key) RPAREN IF LPAREN ID(current_node) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN LCURL ID(parent_node) EQUALS ID(current_node) SEMICOLON ID(current_node) EQUALS ID(current_node) DOT ID(GetRight) LPAREN RPAREN SEMICOLON RCURL ELSE ID(cont) EQUALS FALSE SEMICOLON ELSE LCURL IF LPAREN ID(is_root) RPAREN IF LPAREN NOT ID(current_node) DOT ID(GetHas_Right) LPAREN RPAREN AND NOT ID(current_node) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN ID(ntb) EQUALS TRUE SEMICOLON ELSE ID(ntb) EQUALS THIS DOT ID(Remove) LPAREN ID(parent_node) COMMA ID(current_node) RPAREN SEMICOLON ELSE ID(ntb) EQUALS THIS DOT ID(Remove) LPAREN ID(parent_node) COMMA ID(current_node) RPAREN SEMICOLON ID(found) EQUALS TRUE SEMICOLON ID(cont) EQUALS FALSE SEMICOLON RCURL ID(is_root) EQUALS FALSE SEMICOLON RCURL RETURN ID(found) SEMICOLON RCURL PUBLIC BOOLEAN ID(Remove) LPAREN ID(Tree) ID(p_node) COMMA ID(Tree) ID(c_node) RPAREN LCURL BOOLEAN ID(ntb) SEMICOLON INT ID(auxkey1) SEMICOLON INT ID(auxkey2) SEMICOLON IF LPAREN ID(c_node) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN ID(ntb) EQUALS THIS DOT ID(RemoveLeft) LPAREN ID(p_node) COMMA ID(c_node) RPAREN SEMICOLON ELSE IF LPAREN ID(c_node) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN ID(ntb) EQUALS THIS DOT ID(RemoveRight) LPAREN ID(p_node) COMMA ID(c_node) RPAREN SEMICOLON ELSE LCURL ID(auxkey1) EQUALS ID(c_node) DOT ID(GetKey) LPAREN RPAREN SEMICOLON ID(auxkey2) EQUALS LPAREN ID(p_node) DOT ID(GetLeft) LPAREN RPAREN RPAREN DOT ID(GetKey) LPAREN RPAREN SEMICOLON IF LPAREN THIS DOT ID(Compare) LPAREN ID(auxkey1) COMMA ID(auxkey2) RPAREN RPAREN LCURL ID(ntb) EQUALS ID(p_node) DOT ID(SetLeft) LPAREN ID(my_null) RPAREN SEMICOLON ID(ntb) EQUALS ID(p_node) DOT ID(SetHas_Left) LPAREN FALSE RPAREN SEMICOLON RCURL ELSE LCURL ID(ntb) EQUALS ID(p_node) DOT ID(SetRight) LPAREN ID(my_null) RPAREN SEMICOLON ID(ntb) EQUALS ID(p_node) DOT ID(SetHas_Right) LPAREN FALSE RPAREN SEMICOLON RCURL RCURL RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(RemoveRight) LPAREN ID(Tree) ID(p_node) COMMA ID(Tree) ID(c_node) RPAREN LCURL BOOLEAN ID(ntb) SEMICOLON WHILE LPAREN ID(c_node) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN LCURL ID(ntb) EQUALS ID(c_node) DOT ID(SetKey) LPAREN LPAREN ID(c_node) DOT ID(GetRight) LPAREN RPAREN RPAREN DOT ID(GetKey) LPAREN RPAREN RPAREN SEMICOLON ID(p_node) EQUALS ID(c_node) SEMICOLON ID(c_node) EQUALS ID(c_node) DOT ID(GetRight) LPAREN RPAREN SEMICOLON RCURL ID(ntb) EQUALS ID(p_node) DOT ID(SetRight) LPAREN ID(my_null) RPAREN SEMICOLON ID(ntb) EQUALS ID(p_node) DOT ID(SetHas_Right) LPAREN FALSE RPAREN SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(RemoveLeft) LPAREN ID(Tree) ID(p_node) COMMA ID(Tree) ID(c_node) RPAREN LCURL BOOLEAN ID(ntb) SEMICOLON WHILE LPAREN ID(c_node) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN LCURL ID(ntb) EQUALS ID(c_node) DOT ID(SetKey) LPAREN LPAREN ID(c_node) DOT ID(GetLeft) LPAREN RPAREN RPAREN DOT ID(GetKey) LPAREN RPAREN RPAREN SEMICOLON ID(p_node) EQUALS ID(c_node) SEMICOLON ID(c_node) EQUALS ID(c_node) DOT ID(GetLeft) LPAREN RPAREN SEMICOLON RCURL ID(ntb) EQUALS ID(p_node) DOT ID(SetLeft) LPAREN ID(my_null) RPAREN SEMICOLON ID(ntb) EQUALS ID(p_node) DOT ID(SetHas_Left) LPAREN FALSE RPAREN SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC INT ID(Search) LPAREN INT ID(v_key) RPAREN LCURL ID(Tree) ID(current_node) SEMICOLON INT ID(ifound) SEMICOLON BOOLEAN ID(cont) SEMICOLON INT ID(key_aux) SEMICOLON ID(current_node) EQUALS THIS SEMICOLON ID(cont) EQUALS TRUE SEMICOLON ID(ifound) EQUALS INT(0) SEMICOLON WHILE LPAREN ID(cont) RPAREN LCURL ID(key_aux) EQUALS ID(current_node) DOT ID(GetKey) LPAREN RPAREN SEMICOLON IF LPAREN ID(v_key) LESS_THAN ID(key_aux) RPAREN IF LPAREN ID(current_node) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN ID(current_node) EQUALS ID(current_node) DOT ID(GetLeft) LPAREN RPAREN SEMICOLON ELSE ID(cont) EQUALS FALSE SEMICOLON ELSE IF LPAREN ID(key_aux) LESS_THAN ID(v_key) RPAREN IF LPAREN ID(current_node) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN ID(current_node) EQUALS ID(current_node) DOT ID(GetRight) LPAREN RPAREN SEMICOLON ELSE ID(cont) EQUALS FALSE SEMICOLON ELSE LCURL ID(ifound) EQUALS INT(1) SEMICOLON ID(cont) EQUALS FALSE SEMICOLON RCURL RCURL RETURN ID(ifound) SEMICOLON RCURL PUBLIC BOOLEAN ID(Print) LPAREN RPAREN LCURL BOOLEAN ID(ntb) SEMICOLON ID(Tree) ID(current_node) SEMICOLON ID(current_node) EQUALS THIS SEMICOLON ID(ntb) EQUALS THIS DOT ID(RecPrint) LPAREN ID(current_node) RPAREN SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC BOOLEAN ID(RecPrint) LPAREN ID(Tree) ID(node) RPAREN LCURL BOOLEAN ID(ntb) SEMICOLON IF LPAREN ID(node) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN LCURL ID(ntb) EQUALS THIS DOT ID(RecPrint) LPAREN ID(node) DOT ID(GetLeft) LPAREN RPAREN RPAREN SEMICOLON RCURL ELSE ID(ntb) EQUALS TRUE SEMICOLON PRINT LPAREN ID(node) DOT ID(GetKey) LPAREN RPAREN RPAREN SEMICOLON IF LPAREN ID(node) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN LCURL ID(ntb) EQUALS THIS DOT ID(RecPrint) LPAREN ID(node) DOT ID(GetRight) LPAREN RPAREN RPAREN SEMICOLON RCURL ELSE ID(ntb) EQUALS TRUE SEMICOLON RETURN TRUE SEMICOLON RCURL PUBLIC INT ID(accept) LPAREN ID(Visitor) ID(v) RPAREN LCURL INT ID(nti) SEMICOLON PRINT LPAREN INT(333) RPAREN SEMICOLON ID(nti) EQUALS ID(v) DOT ID(visit) LPAREN THIS RPAREN SEMICOLON RETURN INT(0) SEMICOLON RCURL RCURL CLASS ID(Visitor) LCURL ID(Tree) ID(l) SEMICOLON ID(Tree) ID(r) SEMICOLON PUBLIC INT ID(visit) LPAREN ID(Tree) ID(n) RPAREN LCURL INT ID(nti) SEMICOLON IF LPAREN ID(n) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN LCURL ID(r) EQUALS ID(n) DOT ID(GetRight) LPAREN RPAREN SEMICOLON ID(nti) EQUALS ID(r) DOT ID(accept) LPAREN THIS RPAREN SEMICOLON RCURL ELSE ID(nti) EQUALS INT(0) SEMICOLON IF LPAREN ID(n) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN LCURL ID(l) EQUALS ID(n) DOT ID(GetLeft) LPAREN RPAREN SEMICOLON ID(nti) EQUALS ID(l) DOT ID(accept) LPAREN THIS RPAREN SEMICOLON RCURL ELSE ID(nti) EQUALS INT(0) SEMICOLON RETURN INT(0) SEMICOLON RCURL RCURL CLASS ID(MyVisitor) EXTENDS ID(Visitor) LCURL PUBLIC INT ID(visit) LPAREN ID(Tree) ID(n) RPAREN LCURL INT ID(nti) SEMICOLON IF LPAREN ID(n) DOT ID(GetHas_Right) LPAREN RPAREN RPAREN LCURL ID(r) EQUALS ID(n) DOT ID(GetRight) LPAREN RPAREN SEMICOLON ID(nti) EQUALS ID(r) DOT ID(accept) LPAREN THIS RPAREN SEMICOLON RCURL ELSE ID(nti) EQUALS INT(0) SEMICOLON PRINT LPAREN ID(n) DOT ID(GetKey) LPAREN RPAREN RPAREN SEMICOLON IF LPAREN ID(n) DOT ID(GetHas_Left) LPAREN RPAREN RPAREN LCURL ID(l) EQUALS ID(n) DOT ID(GetLeft) LPAREN RPAREN SEMICOLON ID(nti) EQUALS ID(l) DOT ID(accept) LPAREN THIS RPAREN SEMICOLON RCURL ELSE ID(nti) EQUALS INT(0) SEMICOLON RETURN INT(0) SEMICOLON RCURL RCURL
